{"version":3,"sources":["redux/modules/weather/reducer.ts","redux/modules/weather/consts.ts","redux/combineReducers.ts","components/componentsStyles.ts","components/navButtons.tsx","styles/background.ts","components/appWrapper.tsx","components/spinner/index.tsx","components/spinner/spinner.tsx","pages/week/components/styled.ts","pages/week/view.tsx","utils/imgService.ts","api/weather-service.ts","redux/modules/weather/actions.ts","pages/week/index.tsx","pages/day/components/styled.ts","pages/day/view.tsx","pages/day/index.tsx","index.tsx","routes.tsx"],"names":["initState","week","requestTime","undefined","loading","data","applicable_date","weather_state_abbr","weather_state_name","max_temp","min_temp","id","the_temp","created","day","weather","state","action","type","Date","payload","consolidated_weather","Error","combineReducers","StyledLink","styled","NavLink","StyledFlex","div","DayCard","Image","img","DateBlock","DayNameBlock","WeatherBlock","TemperatureBlock","ButtonBlock","NavButtons","to","getBackground","stateOfWeather","test","AppWrapper","props","weatherState","connect","Spinner","className","DayBand","WeekWrapper","Week","getWeatherForWeek","useEffect","map","date","dayNumber","getDate","weekday","toLocaleString","month","weekdayCapitalized","charAt","toUpperCase","slice","monthCapitalized","key","Math","round","src","_apiBase","_woeid","getResource","url","a","fetch","res","ok","status","json","getWeatherForToday","today","toISOString","substring","replace","receiveWeatherWeek","receiveWeatherDay","getWeatherForDayThunk","getSeconds","dispatch","weatherService","bindActionCreators","toLocaleDateString","getWeatherForWeekThunk","DayWrapper","PlaceAndTimeBlock","Day","getWeatherForDay","useState","weatherNow","setWeatherNow","createdTime","temperature","split","composeEnhancers","composeWithDevTools","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","path","exact","component","document","getElementById"],"mappings":"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","file":"static/js/main.a6d9aeeb.chunk.js","sourcesContent":["import * as I from '../../../interfaces';\nimport * as C from './consts';\n\nconst initState = {\n    week: {\n        requestTime: undefined,\n        loading: false,\n        data: [{\n            applicable_date: '',\n            weather_state_abbr: '',\n            weather_state_name: '',\n            max_temp: undefined,\n            min_temp: undefined,\n            id: undefined,\n            the_temp: undefined,\n            created: '',\n        }]\n    },\n    day: {\n        requestTime: undefined,\n        loading: false,\n        data: [{\n            applicable_date: '',\n            weather_state_abbr: '',\n            weather_state_name: '',\n            max_temp: undefined,\n            min_temp: undefined,\n            id: undefined,\n            the_temp: undefined,\n            created: '',\n        }]\n    }\n}\n\nconst weather = (state: I.IPeriod = initState, action: I.IAction): I.IPeriod => {\n    switch (action.type) {\n        case C.FETCH_WEEK_SENDED:\n            return {\n                ...state,\n                week: {\n                    requestTime: new Date(),\n                    loading: true,\n                    data: [{\n                        applicable_date: '',\n                        weather_state_abbr: '',\n                        weather_state_name: '',\n                        max_temp: undefined,\n                        min_temp: undefined,\n                        id: undefined,\n                        the_temp: undefined,\n                        created: '',\n                    }]\n                }\n            };\n        case C.RESPOND_WEEK_RCVD:\n            return {\n                ...state,\n                week: {\n                    requestTime: new Date('timestamp'),\n                    loading: false,\n                    data: action.payload\n                        ? action.payload.consolidated_weather\n                        : new Error('Server response is not valid')\n                }\n            };\n        case C.FETCH_DAY_SENDED:\n            return {\n                ...state,\n                day: {\n                    requestTime: new Date('timestamp'),\n                    loading: true,\n                    data: [{\n                        applicable_date: '',\n                        weather_state_abbr: '',\n                        weather_state_name: '',\n                        max_temp: undefined,\n                        min_temp: undefined,\n                        id: undefined,\n                        the_temp: undefined,\n                        created: '',\n                    }]\n                }\n            };\n        case C.RESPOND_DAY_RCVD:\n            return {\n                ...state,\n                day: {\n                    requestTime: new Date(),\n                    loading: false,\n                    data: action.payload\n                        ? action.payload.consolidated_weather\n                        : new Error('Server response is not valid')\n                }\n            };\n        default:\n            return state;\n    }\n}\n\nexport default weather;","export const FETCH_WEEK_SENDED = 'FETCH_WEEK_SENDED';\nexport const RESPOND_WEEK_RCVD = 'RESPOND_WEEK_RCVD';\n\nexport const FETCH_DAY_SENDED = 'FETCH_DAY_SENDED';\nexport const RESPOND_DAY_RCVD = 'RESPOND_DAY_RCVD';\n","import { combineReducers } from 'redux';\nimport weather from './modules/weather/reducer';\n\nexport default combineReducers({\n    weather,\n});","import styled from 'styled-components';\nimport {NavLink} from 'react-router-dom';\n\nexport const StyledLink = styled(NavLink)`\n  border-radius: 28px;\n  font-family: Arial;\n  color: #ffffff;\n  font-size: 20px;\n  padding: 10px 20px 10px 20px;\n  text-decoration: none;\n  background: #3498db;\n  &.active {\n    background: transparent;\n    color: black;\n  }\n`;\n\nexport const AppWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    background-color: #F9F9F9;\n    padding: 30px 0px;\n`;\n\nexport const StyledFlex = styled.div`\n    display: flex;\n`\n\nexport const DayCard = styled(StyledFlex)`\n    width: 100%;\n    height: 100%;\n    position: relative;\n    width: 25em;\n    justify-content: space-between;\n`;\n\nexport const Image = styled.img`\n`;\n\nexport const DateBlock = styled(StyledFlex)`\n    flex-direction: column;\n    justify-content: center;\n`;\n\nexport const DayNameBlock = styled(StyledFlex)`\n\n`;\n\nexport const WeatherBlock = styled(StyledFlex)`\n\n`;\n\nexport const TemperatureBlock = styled(StyledFlex)`\n    align-items: center;\n    padding-right: 20px;\n`;\n\nexport const ButtonBlock = styled.div`\n    display: flex;\n    max-width: 300px;\n    height: 100%;\n    position: relative;\n    width: 25em;\n    justify-content: space-between;\n`;","import React from 'react';\nimport * as S from '../components/componentsStyles'\n\n\nexport default function NavButtons() {\n    return (\n        <S.ButtonBlock>\n            <S.StyledLink to=\"/today\">\n                Today\n            </S.StyledLink>\n            <S.StyledLink to=\"/week\">\n                Week\n            </S.StyledLink>\n        </S.ButtonBlock>\n    )\n}\n","export const getBackground = (stateOfWeather: string): string => {\n    if ((/Cloud/).test(stateOfWeather) || (/Rain/).test(stateOfWeather)) {\n        return `#EAEAEA`;\n    } else if ((/Clear/).test(stateOfWeather) || (/Light/).test(stateOfWeather) || (/Showers/).test(stateOfWeather)) {\n        return `#FFF7E0`;\n    } else if (stateOfWeather === 'default'){\n        return `#F9F9F9`;\n    } else {\n        return ``\n    }\n}","import styled from 'styled-components';\nimport { connect } from 'react-redux';\n\nimport * as I from '../interfaces';\nimport { getBackground } from '../styles/background'\n\nconst mapStateToProps = (state: I.IStore): WrapperProps | Error => {\n    if (state.weather.day.data instanceof Error) throw state.weather.day.data\n    return {\n        weatherState: state.weather.day.data[0].weather_state_name,\n    }\n}\n\ninterface WrapperProps {\n    weatherState: any,\n}\n\nconst AppWrapper = styled.div <WrapperProps>`\n    background: ${props => getBackground(props.weatherState)};\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 30px 0px;\n`;\n\nexport default connect(mapStateToProps, null)(AppWrapper)\n","import Spinner from './spinner'\n\nexport default Spinner","import React from 'react';\nimport './spinner.css'\n\nexport default function Spinner () {\n    return (\n        <div className=\"lds-css ng-scope\"><div className=\"lds-ripple\"><div></div><div></div></div></div>\n    )\n}\n","import styled from 'styled-components';\nimport { getBackground } from '../../../styles/background';\n\nexport const StyledFlex = styled.div`\n    display: flex;\n`\n\ninterface DayCardProps {\n    weatherState: string;\n}\n\nexport const DayBand = styled(StyledFlex) <DayCardProps>`\n    background: ${props => getBackground(props.weatherState)};\n    width: 100%;\n    justify-content: center;\n    padding: 0.5em 0em;\n`;\n\nexport const WeekWrapper = styled(StyledFlex)`\n    height: 100%;\n    width: 100%;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding-top: 30px;\n`;","import React, { useEffect } from 'react';\n\nimport { getImgUrl } from '../../utils/imgService';\nimport Spinner from '../../components/spinner'\nimport * as I from '../../interfaces';\nimport * as CS from '../../components/componentsStyles';\nimport * as PS from './components/styled';\n\n\ninterface IWeekProps extends I.IWeatherStore {\n    getWeatherForWeek: (requestTime: Date | undefined) => void;\n}\n\nconst Week: React.FC<IWeekProps> = ({ data, loading, requestTime, getWeatherForWeek }) => {\n    if (data instanceof Error) throw data\n\n    useEffect(() => {\n        getWeatherForWeek(requestTime)\n    }, []);\n\n    const renderDays = () => {\n        return data.map(day => {\n            const {\n                applicable_date,\n                max_temp = 0,\n                min_temp = 0,\n                weather_state_abbr,\n                weather_state_name,\n                id = 0\n            } = day;\n\n            const date: Date = new Date(applicable_date)\n            const dayNumber: number = date.getDate()\n            const weekday: string = date.toLocaleString('default', { weekday: 'long' });\n            const month: string = date.toLocaleString('default', { month: 'short' });\n\n            const weekdayCapitalized = weekday.charAt(0).toUpperCase() + weekday.slice(1);\n            const monthCapitalized = month.charAt(0).toUpperCase() + month.slice(1);\n            return (\n                <PS.DayBand\n                    weatherState={weather_state_name}\n                    key={id}\n                >\n                    <CS.DayCard>\n                        <CS.DateBlock>\n                            <CS.DayNameBlock>\n                                {weekdayCapitalized}\n                            </CS.DayNameBlock>\n                            {`${dayNumber} ${monthCapitalized}`}\n                        </CS.DateBlock>\n\n                        <CS.WeatherBlock>\n                            <CS.TemperatureBlock>\n                                {Math.round(max_temp)} / {Math.round(min_temp)}\n                            </CS.TemperatureBlock>\n                            <CS.Image\n                                src={getImgUrl(weather_state_abbr)}\n                            />\n                        </CS.WeatherBlock>\n                    </CS.DayCard>\n                </PS.DayBand>\n            )\n        })\n    }\n\n    if (loading) {\n        return (\n            <Spinner />\n        )\n    }\n\n    return (\n        <PS.WeekWrapper>\n            {renderDays()}\n        </PS.WeekWrapper>\n    );\n}\n\nexport default Week;","export const getImgUrl = (type: string): string =>\n    `https://www.metaweather.com/static/img/weather/${type}.svg`\n\n\nexport const getBigImgUrl = (type: string): string =>\n    `https://www.metaweather.com/static/img/weather/png/${type}.png`\n","class WeatherService {\n  _apiBase = `https://cors-anywhere.herokuapp.com/metaweather.com/api/location/`;\n  _woeid = `2122265`;\n\n  getResource = async (url: String): Promise<any> => {\n    const res = await fetch(`${this._apiBase}${url}`);\n\n    if (!res.ok) {\n      throw new Error(`${res.status}`)\n    };\n\n    return await res.json();\n  }\n\n  getWeatherForWeek = (): any => {\n    return this.getResource(this._woeid);\n  }\n\n  getWeatherForToday = (): any => {\n    const today = new Date().toISOString().substring(0, 10).replace(/-/g, \"/\");\n    return this.getResource(`${this._woeid}/${today}`);\n  }\n}\n\nexport default new WeatherService();","import { Dispatch } from 'redux';\nimport * as I from '../../../interfaces';\nimport * as C from './consts';\nimport weatherService from '../../../api/weather-service';\n\nexport const fetchWeatherWeek = (): I.IAction => {\n    return {\n        type: C.FETCH_WEEK_SENDED\n    }\n}\n\nexport const receiveWeatherWeek = (data: I.IWeatherResponse): I.IAction => {\n    return {\n        type: C.RESPOND_WEEK_RCVD,\n        payload: data\n    }\n}\n\nexport const fetchWeatherDay = (): I.IAction => {\n    return {\n        type: C.FETCH_DAY_SENDED\n    }\n}\n\nexport const receiveWeatherDay = (data: I.IWeatherResponse): I.IAction => {\n    return {\n        type: C.RESPOND_DAY_RCVD,\n        payload: data\n    }\n}\n\nexport const getWeatherForWeekThunk = (requestTime: Date | undefined) => {\n    if (requestTime && ((new Date()).toLocaleDateString() === (new Date()).toLocaleDateString())) {\n        return {\n            type: \"DUMMY\"\n        }\n    }\n    return async (dispatch: Dispatch) => {\n        dispatch(fetchWeatherWeek());\n        const data = await weatherService.getWeatherForWeek();\n        dispatch(receiveWeatherWeek(data));\n    }\n}\n\nexport const getWeatherForDayThunk = (requestTime: Date | undefined) => {\n    if (requestTime && (new Date().getSeconds() - requestTime.getSeconds() < 1000)) {\n        return {\n            // TODO: rob of \"DUMMY\" actions\n            type: \"DUMMY\"\n        }\n    }\n    return async (dispatch: Dispatch) => {\n        dispatch(fetchWeatherDay());\n        // TODO: fix this temporary hack, low priority\n        const data = {\n            consolidated_weather: await weatherService.getWeatherForToday()\n        }\n        dispatch(receiveWeatherDay(data));\n    }\n}","import { Dispatch, bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport * as I from '../../interfaces';\nimport Week from './view'\nimport { getWeatherForWeekThunk } from '../../redux/modules/weather/actions';\n\nconst mapStateToProps = (state: I.IStore): I.IWeatherStore => {\n    return {\n        requestTime: state.weather.week.requestTime,\n        data: state.weather.week.data,\n        loading: state.weather.week.loading\n    }\n}\nconst mapDispathcToProps = (dispatch: Dispatch) => {\n    return {\n        getWeatherForWeek: bindActionCreators((requestTime: Date | undefined) => getWeatherForWeekThunk(requestTime), dispatch)\n    }\n}\n\nexport default connect(mapStateToProps, mapDispathcToProps)(Week)","import styled from 'styled-components';\nimport { getBackground } from '../../../styles/background';\n\ninterface WrapperProps {\n    weatherState: string;\n}\n\nexport const DayWrapper = styled.div <WrapperProps>`\n    display: flex;\n    height: 100%;\n    width: 100%;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding-top: 30px;\n`;\n\nexport const Image = styled.img`\n    display: flex;\n    max-width: 15em;\n    maw-height: 15em;\n    padding: 3em;\n`;\n\nexport const TemperatureBlock = styled.div`\n    display: flex;\n    max-width: 15em;\n    maw-height: 15em;\n    padding: 2em;\n    font-size: 2em;\n`;\n\nexport const PlaceAndTimeBlock = styled.div`\n    display: flex;\n    max-width: 15em;\n    flex-direction: column;\n    align-items: center;\n    maw-height: 15em;\n    padding: 2em;\n`;","import React, { useState, useEffect } from 'react';\n\nimport { getBigImgUrl } from '../../utils/imgService';\nimport Spinner from '../../components/spinner'\nimport * as I from '../../interfaces';\nimport * as CS from '../../components/componentsStyles';\nimport * as PS from './components/styled';\n\n\ninterface IDayProps extends I.IWeatherStore {\n    getWeatherForDay: (requestTime: Date | undefined) => void;\n}\n\nconst Day: React.FC<IDayProps> = ({ data, loading, requestTime, getWeatherForDay }) => {\n    if (data instanceof Error) throw data\n    const [weatherNow, setWeatherNow] = useState(data[0]);\n\n    useEffect(() => {\n        setWeatherNow(data[0]);\n    }, [data]);\n\n    useEffect(() => {\n        getWeatherForDay(requestTime);\n    }, []);\n\n    if (loading) {\n        return (\n            <Spinner />\n        )\n    }\n\n    const { weather_state_abbr, weather_state_name, the_temp, created } = weatherNow;\n    let createdTime;\n    if(created){\n        createdTime = created.split('T')[1].slice(0, 5)\n    }\n    let temperature;\n    if (the_temp) {\n        temperature = Math.round(the_temp)\n    }\n    return (\n        <PS.DayWrapper\n            weatherState={weather_state_name}\n        >\n            <PS.Image src={getBigImgUrl(weather_state_abbr)}/>\n\n            <PS.TemperatureBlock>\n                {temperature}°\n            </PS.TemperatureBlock>\n            <PS.PlaceAndTimeBlock>\n                {createdTime}\n                <p>\n                    Moscow, RF\n                </p>\n            </PS.PlaceAndTimeBlock>\n        </PS.DayWrapper>\n    );\n}\n\nexport default Day","import { Dispatch, bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport * as I from '../../interfaces';\nimport Day from './view'\nimport { getWeatherForDayThunk } from '../../redux/modules/weather/actions';\n\nconst mapStateToProps = (state: I.IStore): I.IWeatherStore => {\n    return {\n        requestTime: state.weather.day.requestTime,\n        data: state.weather.day.data,\n        loading: state.weather.day.loading\n    }\n}\n\nconst mapDispathcToProps = (dispatch: Dispatch) => {\n    return {\n        getWeatherForDay: bindActionCreators(getWeatherForDayThunk, dispatch)\n    }\n}\n\nexport default connect(mapStateToProps, mapDispathcToProps)(Day)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './redux/combineReducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport Routes from './routes';\n\nconst composeEnhancers = composeWithDevTools({})\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <Routes />\n    </Provider>\n    , document.getElementById('root'));","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport NavButtons from './components/navButtons'\nimport AppWrapper from './components/appWrapper'\nimport Week from './pages/week';\nimport Day from './pages/day';\n\nexport default function Routes() {\n  return (\n    <BrowserRouter>\n      \n      <AppWrapper\n        weatherState={\"default\"}\n      >\n        <NavButtons />\n        <Switch>\n          <Route path=\"/week\" exact component={Week} />\n          <Route path=\"/today\" exact component={Day} />\n        </Switch>\n      </AppWrapper>\n    </BrowserRouter>\n  )\n}"],"sourceRoot":""}